name: üöÄ Release Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: "18"
  BUN_VERSION: "latest"
  EMOJI_SUCCESS: "‚úÖ"
  EMOJI_FAILURE: "‚ùå"
  EMOJI_WARNING: "‚ö†Ô∏è"

jobs:
  # üß™ Continuous Integration Job
  ci:
    name: üß™ Quality Assurance & Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package.outputs.version }}
      name: ${{ steps.package.outputs.name }}
      should-deploy: ${{ steps.check-deploy.outputs.should-deploy }}
      build-status: ${{ steps.build-status.outputs.status }}
    
    steps:
      - name: üé¨ Starting CI Pipeline
        run: |
          echo "::notice title=üöÄ Pipeline Started::Starting Quality Assurance & Build process"
          echo "üìä **Pipeline Information**" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: Release Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üèóÔ∏è Setup Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üì¶ Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: üìã Install dependencies
        run: |
          echo "::group::Installing dependencies"
          bun install --frozen-lockfile
          echo "::endgroup::"

      - name: üìÑ Extract package info
        id: package
        run: |
          echo "::group::üì¶ Extracting Package Information"
          VERSION=$(node -p "require('./package.json').version")
          NAME=$(node -p "require('./package.json').name")
          DESCRIPTION=$(node -p "require('./package.json').description || 'No description'")
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT
          
          echo "üì¶ **Package Details**" >> $GITHUB_STEP_SUMMARY
          echo "- **Name**: \`$NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Description**: $DESCRIPTION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "::notice title=üì¶ Package Info::$NAME@$VERSION"
          echo "::endgroup::"

      - name: üîç TypeScript type checking
        run: |
          echo "::group::üîç TypeScript Type Checking"
          echo "üîç Running TypeScript compiler in check mode..."
          
          if bun run typecheck; then
            echo "‚úÖ **TypeScript**: All types are valid" >> $GITHUB_STEP_SUMMARY
            echo "::notice title=‚úÖ TypeScript::Type checking passed successfully"
          else
            echo "‚ùå **TypeScript**: Type errors found" >> $GITHUB_STEP_SUMMARY
            echo "::error title=‚ùå TypeScript::Type checking failed"
            exit 1
          fi
          echo "::endgroup::"

      - name: üé® Code style & linting
        run: |
          echo "::group::üé® Code Style & Linting"
          echo "üé® Running Biome linter and formatter..."
          
          if bun run lint; then
            echo "‚úÖ **Linting**: Code style is consistent" >> $GITHUB_STEP_SUMMARY
            echo "::notice title=‚úÖ Linting::Code style and linting passed"
          else
            echo "‚ùå **Linting**: Style issues found" >> $GITHUB_STEP_SUMMARY
            echo "::error title=‚ùå Linting::Code style issues detected"
            exit 1
          fi
          echo "::endgroup::"

      - name: üèóÔ∏è Build project
        id: build
        run: |
          echo "::group::üèóÔ∏è Building Project"
          echo "üèóÔ∏è Compiling TypeScript and bundling..."
          
          BUILD_START=$(date +%s)
          if bun run build; then
            BUILD_END=$(date +%s)
            BUILD_TIME=$((BUILD_END - BUILD_START))
            
            echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
            echo "‚úÖ **Build**: Completed in ${BUILD_TIME}s" >> $GITHUB_STEP_SUMMARY
            echo "::notice title=‚úÖ Build::Build completed successfully in ${BUILD_TIME}s"
          else
            echo "‚ùå **Build**: Failed to compile" >> $GITHUB_STEP_SUMMARY
            echo "::error title=‚ùå Build::Build process failed"
            exit 1
          fi
          echo "::endgroup::"

      - name: üìä Build analysis
        run: |
          echo "::group::üìä Build Analysis & Validation"
          if [ -f "dist/index.js" ]; then
            # File size analysis
            SIZE_BYTES=$(stat -c%s "dist/index.js")
            SIZE_KB=$((SIZE_BYTES / 1024))
            SIZE_MB=$((SIZE_KB / 1024))
            
            # Count lines
            LINES=$(wc -l < "dist/index.js")
            
            echo "üìä **Build Analysis**" >> $GITHUB_STEP_SUMMARY
            echo "- **Bundle Size**: ${SIZE_KB} KB (${SIZE_BYTES} bytes)" >> $GITHUB_STEP_SUMMARY
            echo "- **Lines of Code**: ${LINES}" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Time**: ${{ steps.build.outputs.build_time }}s" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Size warnings
            if [ $SIZE_KB -gt 1000 ]; then
              echo "‚ö†Ô∏è Bundle size is quite large (>1MB)" >> $GITHUB_STEP_SUMMARY
              echo "::warning title=üì¶ Bundle Size::Bundle is larger than 1MB"
            elif [ $SIZE_KB -gt 500 ]; then
              echo "‚ÑπÔ∏è Bundle size is moderate (~500KB+)" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚úÖ Bundle size is optimal (<500KB)" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "üìÅ **Build Artifacts**:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            ls -la dist/ >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "::notice title=üì¶ Bundle::Size: ${SIZE_KB}KB, Lines: ${LINES}"
          else
            echo "‚ùå **Build**: Output file not found" >> $GITHUB_STEP_SUMMARY
            echo "::error title=‚ùå Build::Build output missing"
            exit 1
          fi
          echo "::endgroup::"

      - name: üß™ Run tests
        run: |
          echo "::group::üß™ Running Test Suite"
          # Uncomment when tests are ready
          # if bun run test; then
          #   echo "‚úÖ **Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
          #   echo "::notice title=‚úÖ Tests::All test suites passed"
          # else
          #   echo "‚ùå **Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          #   echo "::error title=‚ùå Tests::Test failures detected"
          #   exit 1
          # fi
          
          echo "‚ö†Ô∏è **Tests**: Currently disabled (no test files)" >> $GITHUB_STEP_SUMMARY
          echo "::warning title=‚ö†Ô∏è Tests::Test suite is not implemented yet"
          echo "üí° Consider adding tests for better code quality assurance"
          echo "::endgroup::"

      - name: üéØ Build status summary
        id: build-status
        run: |
          echo "status=success" >> $GITHUB_OUTPUT
          
          echo "## üéØ CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | ‚úÖ Passed | All types are valid |" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ‚úÖ Passed | Code style is consistent |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ‚úÖ Passed | Bundle created successfully |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ‚ö†Ô∏è Skipped | No test suite available |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: ‚úÖ Check deployment conditions
        id: check-deploy
        run: |
          echo "::group::üîç Deployment Condition Check"
          
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "üöÄ **Deployment**: Ready to deploy" >> $GITHUB_STEP_SUMMARY
            echo "::notice title=üöÄ Deploy::Deployment conditions met for main branch"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è **Deployment**: Skipped (not main branch)" >> $GITHUB_STEP_SUMMARY
            echo "::notice title=‚è≠Ô∏è Deploy::Skipping deployment (trigger: ${{ github.event_name }}, ref: ${{ github.ref }})"
          fi
          
          echo "::endgroup::"

      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ steps.package.outputs.version }}
          path: |
            dist/
            package.json
            README.md
          retention-days: 7

      - name: üéâ CI Success Notification
        if: success()
        run: |
          echo "::notice title=üéâ CI Complete::Quality assurance pipeline completed successfully!"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**‚úÖ CI Pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "*Ready for the next stage: ${{ steps.check-deploy.outputs.should-deploy == 'true' && 'Deployment' || 'Manual review' }}*" >> $GITHUB_STEP_SUMMARY

  # üöÄ Continuous Deployment Job
  cd:
    name: üöÄ Release & Publish
    runs-on: ubuntu-latest
    needs: ci
    if: (startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push') || github.event_name == 'release'
    permissions:
      contents: write
      packages: write
      id-token: write
    
    environment:
      name: production
      url: https://www.npmjs.com/package/${{ needs.ci.outputs.name }}
    
    steps:
      - name: üé¨ Starting Release Process
        run: |
          echo "::notice title=üöÄ Release Started::Beginning release and publish process"
          echo "## üöÄ Release Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ **Package**: ${{ needs.ci.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "üè∑Ô∏è **Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "üë§ **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üèóÔ∏è Setup Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üì¶ Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: üìã Install dependencies
        run: |
          echo "::group::Installing production dependencies"
          bun install --frozen-lockfile
          echo "::endgroup::"

      - name: üèóÔ∏è Build for production
        run: |
          echo "::group::Building for production release"
          bun run build
          echo "::endgroup::"

      - name: üè∑Ô∏è Extract release information
        id: release
        run: |
          echo "::group::üè∑Ô∏è Processing Release Information"
          
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          RELEASE_TYPE="patch"
          
          # Determine release type based on version changes
          if [[ $VERSION =~ ^[0-9]+\.0\.0$ ]]; then
            RELEASE_TYPE="major"
          elif [[ $VERSION =~ ^[0-9]+\.[0-9]+\.0$ ]]; then
            RELEASE_TYPE="minor"
          fi
          
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          
          echo "üè∑Ô∏è **Release Information**" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: \`$TAG_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: $RELEASE_TYPE release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "::notice title=üè∑Ô∏è Release::$TAG_NAME ($RELEASE_TYPE release)"
          echo "::endgroup::"

      - name: üìù Generate release notes
        id: release-notes
        run: |
          echo "::group::Generating release notes"
          # Extract changelog for this version if it exists
          if [ -f "CHANGELOG.md" ]; then
            echo "üìã Using CHANGELOG.md for release notes"
          else
            echo "üìã Using auto-generated release notes"
          fi
          echo "::endgroup::"

      - name: üéâ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release.outputs.tag }}
          name: "üöÄ Release ${{ steps.release.outputs.version }}"
          body: |
            ## üéâ What's New in ${{ steps.release.outputs.version }}
            
            This release includes improvements, bug fixes, and new features for the PromptBoost CLI tool.
            
            ### üì¶ Installation
            ```bash
            npm install -g ${{ needs.ci.outputs.name }}
            ```
            
            ### üîó Links
            - üìö [Documentation](https://github.com/${{ github.repository }}#readme)
            - üêõ [Report Issues](https://github.com/${{ github.repository }}/issues)
            - üí¨ [Discussions](https://github.com/${{ github.repository }}/discussions)
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.release.outputs.version }}...HEAD
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Publish to npm
        id: npm-publish
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          access: public
          strategy: upgrade
          dry-run: false
          check-version: true
          package: ./package.json

      - name: üìä Post-publish validation
        run: |
          echo "::group::üìä Post-publish Validation"
          
          # Wait a moment for npm to update
          sleep 10
          
          # Check if package is available on npm
          if npm view ${{ needs.ci.outputs.name }}@${{ steps.release.outputs.version }} > /dev/null 2>&1; then
            echo "‚úÖ **Publish**: Package available on npm" >> $GITHUB_STEP_SUMMARY
            echo "::notice title=‚úÖ NPM::Package successfully published and available"
          else
            echo "‚ö†Ô∏è **Publish**: Package may still be propagating" >> $GITHUB_STEP_SUMMARY
            echo "::warning title=‚ö†Ô∏è NPM::Package not immediately available (may be propagating)"
          fi
          
          echo "üîó **Links**:" >> $GITHUB_STEP_SUMMARY
          echo "- [NPM Package](https://www.npmjs.com/package/${{ needs.ci.outputs.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.release.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "::endgroup::"

      - name: üéä Post-deployment notifications
        if: success()
        run: |
          echo "::notice title=üéâ Release Success::${{ needs.ci.outputs.name }}@${{ steps.release.outputs.version }} published successfully!"
          
          echo "## üéâ Release Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: ${{ needs.ci.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ steps.release.outputs.release_type }} release" >> $GITHUB_STEP_SUMMARY
          echo "- **Published**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "npm install -g ${{ needs.ci.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ [NPM Package](https://www.npmjs.com/package/${{ needs.ci.outputs.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- üè∑Ô∏è [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.release.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          echo "- üìö [Documentation](https://github.com/${{ github.repository }}#readme)" >> $GITHUB_STEP_SUMMARY

      - name: üö® Deployment failure notification
        if: failure()
        run: |
          echo "::error title=üí• Release Failed::The release process encountered an error"
          
          echo "## üí• Release Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release process encountered an error and was unable to complete." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the workflow logs for specific error details" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify all required secrets are configured" >> $GITHUB_STEP_SUMMARY
          echo "3. Ensure the tag follows the correct format (v*.*.*)." >> $GITHUB_STEP_SUMMARY
          echo "4. Re-run the workflow after addressing any issues" >> $GITHUB_STEP_SUMMARY

  # üîí Security & Compliance Job
  security:
    name: üîí Security Audit & Compliance
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: üé¨ Starting Security Audit
        run: |
          echo "::notice title=ÔøΩ Security::Starting security audit and compliance checks"
          echo "## üîí Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: ÔøΩüì• Checkout repository
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üìã Install dependencies
        run: bun install --frozen-lockfile

      - name: üîç Security audit
        run: |
          echo "::group::üîç Dependency Security Audit"
          
          # Run bun audit when available, for now use npm audit as fallback
          if command -v npm &> /dev/null; then
            echo "üîç Running npm security audit..."
            if npm audit --audit-level moderate; then
              echo "‚úÖ **Security Audit**: No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
              echo "::notice title=‚úÖ Security::No known vulnerabilities detected"
            else
              AUDIT_EXIT_CODE=$?
              if [ $AUDIT_EXIT_CODE -eq 0 ]; then
                echo "‚úÖ **Security Audit**: Clean" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚ö†Ô∏è **Security Audit**: Issues found" >> $GITHUB_STEP_SUMMARY
                echo "::warning title=‚ö†Ô∏è Security::Security audit found potential issues"
              fi
            fi
          else
            echo "‚ö†Ô∏è **Security Audit**: npm not available" >> $GITHUB_STEP_SUMMARY
            echo "::warning title=‚ö†Ô∏è Security::Security audit skipped (npm unavailable)"
          fi
          
          echo "::endgroup::"

      - name: üìä Dependency analysis
        run: |
          echo "::group::üìä Dependency Security Analysis"
          
          echo "### üì¶ Dependency Overview" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "Direct Dependencies:" >> $GITHUB_STEP_SUMMARY
          bun pm ls --depth=0 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for potentially risky patterns in dependencies
          echo "üîç Analyzing package.json for security patterns..."
          
          # Check for scripts that might be risky
          if grep -q "postinstall\|preinstall" package.json; then
            echo "‚ö†Ô∏è **Security Note**: Install scripts detected" >> $GITHUB_STEP_SUMMARY
            echo "::warning title=‚ö†Ô∏è Security::Package contains install scripts"
          fi
          
          echo "::endgroup::"

      - name: üéØ Security Summary
        run: |
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**üîí Security audit completed**" >> $GITHUB_STEP_SUMMARY
          echo "*Last updated: $(date)*" >> $GITHUB_STEP_SUMMARY